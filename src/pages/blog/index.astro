---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import BlogCard from '../../components/blog/BlogCard.astro';

// Get all blog posts and sort by date (newest first)
const allPosts = await getCollection('blog');
const sortedPosts = allPosts.sort((a, b) => {
  return b.data.date.getTime() - a.data.date.getTime();
});
---

<BaseLayout
  title="Blog | Matheus Mortatti"
  description="Thoughts on game development, programming, and technology"
>
  <Header slot="header" />

  <div class="blog-page">
    <div class="container">
      <header class="page-header">
        <h1 class="page-title">Blog</h1>
        <p class="page-description">
          Thoughts on game development, programming, and technology
        </p>
      </header>

      <div class="search-container">
        <input
          type="search"
          id="search-input"
          class="search-input"
          placeholder="Search posts by title..."
          aria-label="Search posts"
        />
      </div>

      <div class="posts-list" id="posts-list">
        {sortedPosts.map(post => (
          <BlogCard
            title={post.data.title}
            slug={post.slug}
            date={post.data.date}
            description={post.data.description}
            tags={post.data.tags}
            archived={post.data.archived}
          />
        ))}
      </div>

      <div id="no-results" class="no-results" style="display: none;">
        <p>No posts found matching your search.</p>
      </div>
    </div>
  </div>

  <Footer slot="footer" />
</BaseLayout>

<style>
  .blog-page {
    padding-top: var(--spacing-6);
    padding-bottom: var(--spacing-8);
  }

  .page-header {
    margin-bottom: var(--spacing-8);
    text-align: center;
  }

  .page-title {
    margin-bottom: var(--spacing-2);
    font-size: var(--font-size-4xl);
    font-weight: var(--font-weight-bold);
  }

  .page-description {
    font-size: var(--font-size-lg);
    color: var(--color-subtext-1);
  }

  .search-container {
    margin-bottom: var(--spacing-6);
  }

  .search-input {
    width: 100%;
    padding: var(--spacing-3) var(--spacing-4);
    background: var(--color-surface-0);
    border: 1px solid var(--color-surface-1);
    border-radius: var(--radius-lg);
    color: var(--color-text);
    font-size: var(--font-size-base);
    font-family: var(--font-sans);
    transition: border-color var(--transition-base);
  }

  .search-input:focus {
    outline: none;
    border-color: var(--color-primary);
  }

  .search-input::placeholder {
    color: var(--color-subtext-0);
  }

  .posts-list {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-2);
  }

  .no-results {
    padding: var(--spacing-8);
    text-align: center;
    color: var(--color-subtext-1);
    font-size: var(--font-size-lg);
  }

  /* Mobile responsive */
  @media (max-width: 640px) {
    .page-title {
      font-size: var(--font-size-3xl);
    }

    .page-description {
      font-size: var(--font-size-base);
    }
  }
</style>

<script>
  // Client-side search functionality
  const searchInput = document.getElementById('search-input') as HTMLInputElement;
  const postsList = document.getElementById('posts-list');
  const noResults = document.getElementById('no-results');

  if (searchInput && postsList && noResults) {
    const posts = Array.from(postsList.children) as HTMLElement[];

    searchInput.addEventListener('input', (e) => {
      const query = (e.target as HTMLInputElement).value.toLowerCase();

      let visibleCount = 0;

      posts.forEach(post => {
        const title = post.querySelector('.card-title')?.textContent?.toLowerCase() || '';
        const description = post.querySelector('.card-description')?.textContent?.toLowerCase() || '';

        if (title.includes(query) || description.includes(query)) {
          post.style.display = '';
          visibleCount++;
        } else {
          post.style.display = 'none';
        }
      });

      if (visibleCount === 0) {
        noResults.style.display = 'block';
      } else {
        noResults.style.display = 'none';
      }
    });
  }
</script>
