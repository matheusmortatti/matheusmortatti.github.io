---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import BlogCard from '../../components/blog/BlogCard.astro';

// Get only archived posts and sort by date (newest first)
const allPosts = await getCollection('blog');
const archivedPosts = allPosts
  .filter(post => post.data.archived === true)
  .sort((a, b) => b.data.date.getTime() - a.data.date.getTime());
---

<BaseLayout
  title="Archive | Matheus Mortatti"
  description="Historical blog posts and writings from earlier years"
>
  <Header slot="header" />

  <div class="archive-page">
    <div class="container">
      <header class="page-header">
        <h1 class="page-title">Archive</h1>
        <p class="page-description">
          Historical blog posts and writings from earlier years. These posts are preserved as-is from the original site.
        </p>
      </header>

      <div class="archive-info">
        <div class="info-icon">üì¶</div>
        <div class="info-content">
          <p class="info-text">
            <strong>About the Archive:</strong> These posts date back to {archivedPosts.length > 0 && new Date(Math.min(...archivedPosts.map(p => p.data.date.getTime()))).getFullYear()} and have been preserved from the previous version of this site. Content and formatting reflect the original posts.
          </p>
        </div>
      </div>

      <div class="search-container">
        <input
          type="search"
          id="search-input"
          class="search-input"
          placeholder="Search archived posts..."
          aria-label="Search archived posts"
        />
      </div>

      {archivedPosts.length > 0 ? (
        <>
          <div class="posts-list" id="posts-list">
            {archivedPosts.map(post => (
              <BlogCard
                title={post.data.title}
                slug={post.slug}
                date={post.data.date}
                description={post.data.description}
                tags={post.data.tags}
                archived={post.data.archived}
              />
            ))}
          </div>

          <div id="no-results" class="no-results" style="display: none;">
            <p>No archived posts found matching your search.</p>
          </div>
        </>
      ) : (
        <div class="empty-state">
          <p>No archived posts available.</p>
        </div>
      )}

      <div class="back-link">
        <a href="/blog" class="back-button">
          ‚Üê Back to Blog
        </a>
      </div>
    </div>
  </div>

  <Footer slot="footer" />
</BaseLayout>

<style>
  .archive-page {
    padding-top: var(--spacing-6);
    padding-bottom: var(--spacing-8);
  }

  .page-header {
    margin-bottom: var(--spacing-6);
    text-align: center;
  }

  .page-title {
    margin-bottom: var(--spacing-2);
    font-size: var(--font-size-4xl);
    font-weight: var(--font-weight-bold);
  }

  .page-description {
    font-size: var(--font-size-lg);
    color: var(--color-subtext-1);
    max-width: 600px;
    margin: 0 auto;
  }

  .archive-info {
    display: flex;
    gap: var(--spacing-3);
    padding: var(--spacing-4);
    margin-bottom: var(--spacing-6);
    background: var(--color-surface-0);
    border-left: 4px solid var(--color-yellow);
    border-radius: var(--radius-lg);
  }

  .info-icon {
    font-size: var(--font-size-2xl);
    flex-shrink: 0;
  }

  .info-content {
    flex: 1;
  }

  .info-text {
    margin: 0;
    font-size: var(--font-size-base);
    line-height: var(--line-height-relaxed);
    color: var(--color-subtext-1);
  }

  .info-text strong {
    color: var(--color-text);
    font-weight: var(--font-weight-semibold);
  }

  .search-container {
    margin-bottom: var(--spacing-6);
  }

  .search-input {
    width: 100%;
    padding: var(--spacing-3) var(--spacing-4);
    background: var(--color-surface-0);
    border: 1px solid var(--color-surface-1);
    border-radius: var(--radius-lg);
    color: var(--color-text);
    font-size: var(--font-size-base);
    font-family: var(--font-sans);
    transition: border-color var(--transition-base);
  }

  .search-input:focus {
    outline: none;
    border-color: var(--color-primary);
  }

  .search-input::placeholder {
    color: var(--color-subtext-0);
  }

  .posts-list {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-2);
    margin-bottom: var(--spacing-8);
  }

  .no-results,
  .empty-state {
    padding: var(--spacing-8);
    text-align: center;
    color: var(--color-subtext-1);
    font-size: var(--font-size-lg);
  }

  .back-link {
    display: flex;
    justify-content: center;
    padding-top: var(--spacing-6);
    border-top: 1px solid var(--color-surface-0);
  }

  .back-button {
    display: inline-flex;
    align-items: center;
    padding: var(--spacing-2) var(--spacing-4);
    background: var(--color-surface-0);
    color: var(--color-text);
    text-decoration: none;
    border-radius: var(--radius-lg);
    font-weight: var(--font-weight-medium);
    transition: background-color var(--transition-base);
  }

  .back-button:hover {
    background: var(--color-surface-1);
    text-decoration: none;
  }

  /* Mobile responsive */
  @media (max-width: 640px) {
    .page-title {
      font-size: var(--font-size-3xl);
    }

    .page-description {
      font-size: var(--font-size-base);
    }

    .archive-info {
      flex-direction: column;
      text-align: center;
    }

    .info-text {
      font-size: var(--font-size-sm);
    }
  }
</style>

<script>
  // Client-side search functionality (same as blog listing)
  const searchInput = document.getElementById('search-input') as HTMLInputElement;
  const postsList = document.getElementById('posts-list');
  const noResults = document.getElementById('no-results');

  if (searchInput && postsList && noResults) {
    const posts = Array.from(postsList.children) as HTMLElement[];

    searchInput.addEventListener('input', (e) => {
      const query = (e.target as HTMLInputElement).value.toLowerCase();

      let visibleCount = 0;

      posts.forEach(post => {
        const title = post.querySelector('.card-title')?.textContent?.toLowerCase() || '';
        const description = post.querySelector('.card-description')?.textContent?.toLowerCase() || '';

        if (title.includes(query) || description.includes(query)) {
          post.style.display = '';
          visibleCount++;
        } else {
          post.style.display = 'none';
        }
      });

      if (visibleCount === 0) {
        noResults.style.display = 'block';
      } else {
        noResults.style.display = 'none';
      }
    });
  }
</script>
