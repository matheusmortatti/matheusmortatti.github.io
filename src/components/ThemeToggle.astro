---
// No server-side props needed
---

<button
  id="theme-toggle"
  class="theme-toggle"
  aria-label="Toggle theme"
  title="Toggle theme"
>
  <svg class="sun-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
    <circle cx="12" cy="12" r="5"/>
    <line x1="12" y1="1" x2="12" y2="3"/>
    <line x1="12" y1="21" x2="12" y2="23"/>
    <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"/>
    <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"/>
    <line x1="1" y1="12" x2="3" y2="12"/>
    <line x1="21" y1="12" x2="23" y2="12"/>
    <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"/>
    <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"/>
  </svg>
  <svg class="moon-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
    <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/>
  </svg>
</button>

<style>
  .theme-toggle {
    position: relative;
    width: 40px;
    height: 40px;
    border: none;
    background: var(--color-surface-0);
    color: var(--color-text);
    border-radius: var(--radius-md);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color var(--transition-base);
  }

  .theme-toggle:hover {
    background: var(--color-surface-1);
  }

  .sun-icon,
  .moon-icon {
    position: absolute;
    transition: opacity var(--transition-base), transform var(--transition-base);
  }

  :root[data-theme="mocha"] .sun-icon,
  :root .sun-icon {
    opacity: 0;
    transform: rotate(180deg);
  }

  :root[data-theme="mocha"] .moon-icon,
  :root .moon-icon {
    opacity: 1;
    transform: rotate(0deg);
  }

  :root[data-theme="latte"] .sun-icon {
    opacity: 1;
    transform: rotate(0deg);
  }

  :root[data-theme="latte"] .moon-icon {
    opacity: 0;
    transform: rotate(-180deg);
  }
</style>

<script>
  // Theme management
  const STORAGE_KEY = 'theme';
  const THEME_MOCHA = 'mocha';
  const THEME_LATTE = 'latte';

  // Get theme from localStorage or system preference
  function getInitialTheme(): string {
    const stored = localStorage.getItem(STORAGE_KEY);
    if (stored === THEME_MOCHA || stored === THEME_LATTE) {
      return stored;
    }

    // Default to system preference
    if (window.matchMedia('(prefers-color-scheme: light)').matches) {
      return THEME_LATTE;
    }

    return THEME_MOCHA; // Default to dark
  }

  // Apply theme to document
  function applyTheme(theme: string): void {
    document.documentElement.setAttribute('data-theme', theme);
    localStorage.setItem(STORAGE_KEY, theme);
  }

  // Toggle between themes
  function toggleTheme(): void {
    const current = document.documentElement.getAttribute('data-theme') || THEME_MOCHA;
    const next = current === THEME_MOCHA ? THEME_LATTE : THEME_MOCHA;
    applyTheme(next);
  }

  // Initialize theme on page load
  const initialTheme = getInitialTheme();
  applyTheme(initialTheme);

  // Set up toggle button
  const toggleButton = document.getElementById('theme-toggle');
  if (toggleButton) {
    toggleButton.addEventListener('click', toggleTheme);
  }

  // Listen for system theme changes
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
    // Only update if user hasn't manually set a preference
    if (!localStorage.getItem(STORAGE_KEY)) {
      applyTheme(e.matches ? THEME_MOCHA : THEME_LATTE);
    }
  });
</script>
